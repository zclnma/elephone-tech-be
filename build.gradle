plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '2.7.1'
    id "org.flywaydb.flyway" version "7.5.3"
    id 'java'
    id 'idea'
}

group = 'com.elephone'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '11'

ext {
    jibCredHelpers = "ecr-login"
    registry = System.getenv().containsKey("DOCKER_REGISTRY") ? System.getenv().containsKey("DOCKER_REGISTRY") : "606850829238.dkr.ecr.ap-southeast-2.amazonaws.com"
    repo = System.getenv().containsKey("DOCKER_REPOSITORY") ? System.getenv().containsKey("DOCKER_REPOSITORY") : "elephone-management"
    imageTag = System.getenv().containsKey("IMAGE_TAG") ? System.getenv().containsKey("IMAGE_TAG") : "develop"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            "org.flywaydb:flyway-core:$flyway",
            "com.itextpdf:html2pdf:$itextpdf",
            "io.springfox:springfox-swagger2:$swagger",
            "io.springfox:springfox-swagger-ui:$swagger",
            "org.apache.commons:commons-text:$commonsText",
            "org.apache.commons:commons-lang3:$commonsLang3",
            "commons-validator:commons-validator:$validator",
            "com.amazonaws.secretsmanager:aws-secretsmanager-jdbc:$secretManagerJdbc",
            "org.springframework.boot:spring-boot-starter-web:$springboot",
            "org.springframework.boot:spring-boot-starter-mail:$springboot",
            "org.springframework.boot:spring-boot-starter-data-jpa:$springboot",
            "org.springframework.boot:spring-boot-starter-security:$springboot",
            "org.springframework.boot:spring-boot-starter-actuator:$springboot",
            "org.springframework.boot:spring-boot-starter-validation:$springboot",
            "org.springframework.boot:spring-boot-starter-oauth2-resource-server:$springboot",
            "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:$springSecutiry",
            "com.amazonaws:aws-java-sdk-s3:$awsS3",
            "cn.hutool:hutool-all:$hutool",

            platform("software.amazon.awssdk:bom:$awsJavaSdk"),
            "software.amazon.awssdk:sesv2",
            "software.amazon.awssdk:cognitoidentityprovider",
            "software.amazon.awssdk:cognitoidentity",
            "software.amazon.awssdk:sqs",
            "software.amazon.awssdk:s3",
            "software.amazon.awssdk:sns",
            "com.squareup.okhttp3:okhttp:$okhttp3",
            "com.google.code.gson:gson:$gson",
    )

    compileOnly(
            "org.projectlombok:lombok:$lombok",
            "org.mapstruct:mapstruct:$mapstruct",
    )

    developmentOnly(
            "org.springframework.boot:spring-boot-devtools:$springboot"
    )

    runtimeOnly(
            "org.postgresql:postgresql:$postgres",
    )

    annotationProcessor(
            "org.springframework.boot:spring-boot-configuration-processor:$springboot",
            "org.projectlombok:lombok:$lombok",
            "org.mapstruct:mapstruct-processor:$mapstruct",
    )

    testImplementation(
            "org.springframework.boot:spring-boot-starter-test:$springboot",
            "org.springframework.security:spring-security-test:$springSecutiryTest"
    )
}

tasks {
    build {
        dependsOn {
            tasks.jib
        }
    }
}

//Community version doesn't support secret manager
flyway {
    url = "jdbc:postgresql://${System.getenv("AWS_DB_URL") ?: "localhost:5432/elephone"}"
    user = "${System.getenv("AWS_SECRET") ?: "elephone"}"
    locations = ['classpath:db/migration']
    if (!System.getenv().containsKey("AWS_SECRET")) {
        password = "elephone"
    }
}

jib {
    from {
        image = "azul/zulu-openjdk-alpine:11.0.7-jre"
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    to {
        image = "$project.ext.registry/$project.ext.repo:$project.ext.imageTag"
        credHelper = project.ext.jibCredHelpers
    }

    container {
        creationTime = "USE_CURRENT_TIMESTAMP"
        jvmFlags = ['-XX:MaxRAMPercentage=85.0']
        environment = [
                AWS_SECRET            : "",
                AWS_DB_URL            : "",
                AWS_COGNITO_USERPOOLID: "",
        ]
        ports = ["8080"]
    }
}

test {
    useJUnitPlatform()
}
